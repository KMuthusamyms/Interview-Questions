// My way 
#include<stdio.h>
int main()
{
	int num,rem,sum=0;
	scanf("%d",&num);
	while(num!=0)
	{
		rem=num%10;
		sum=sum+rem;
		num=num/10;
	}
	printf("%d",sum);
	return 0;
}

//Digitization
#include<stdio.h>
int main()
{
	int num,power=1,sod=0,digit;
	scanf("%d",&num);
	while((num/power)!=0)
	{
		digit = (num / power) % 10;
		sod = sod + digit;
		power = power * 10;
	}
	printf("%d",sod);
	return 0;
}
The advantage with the latter method is we need not modify the value of n and in the former we always 
modify the value of n by reducing it by 10 everytime.

//Array Rotations
Works fine for any number of rotations
#include<stdio.h>
void reverse(int* arr,int start,int end)
{
	int temp;
	for(;start<end;temp=arr[start],arr[start++]=arr[end],arr[end--]=temp);
}
int main()
{
	int num,*arr,ind,NOR;
	scanf("%d",&num);
	arr=(int*)malloc(sizeof(int)*num);
	for(ind=0;ind<num;ind++)
		scanf("%d",&arr[ind]);
	scanf("%d",&NOR);
	NOR=NOR%num;
	reverse(arr,0,num-1);
	reverse(arr,0,NOR-1);
	reverse(arr,NOR,num-1);
	for(ind=0;ind<num;ind++)
		printf("%d ",arr[ind]);
	return 0;	
}
