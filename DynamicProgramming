Optimization :
  Minimizing or Maximizing a property is known as optimization
Optimization Problem :
  The problems which involve maximizing a particular property or minimizing a particular property are known as optimization problems.
Examples:Minimize cost, maximize profit, maximize reliability, minimize risk.
When you apply exhaustive enumeration for optimization problems then the time complexity goes to exponential in most of the cases
Therefore in order to handle optimization problems there are two programming paradigms.They are:
1.Greedy
2.Dynamic programming
Greedy can solve only a subset of optimization problems and inorder to apply greedy then the problem has to have specific properties and
therefore it can't be applied to all optimization problems
Dynamic programming can solve any optimization problem but for some set of problems the time complexity might get down to polynomial
whereas for other set of problems the time complexity remains exponential therefore for such kind of problems applying DP is as good
as applying exhaustive search.
Therefore before solving the problem using DP, we should find whether there is a scope to get the complexity down to polynomial and then
we go for DP and if there is no scope to get the time complexity down, it would be better we apply Exhaustive enumeration.

Dynamic programming:
  Programming does not mean we are writing some program or it is related to programing language. programming means we are going to make
a table and we are dynamically going to decide whether to call a function or use the table and this is what is meant by dynamic 
programming. Greedy is fine but dynamic programming is much similar to divide and conquer. In divide and conquer we divide a problem into
smaller problems, compute the solutions to smaller problems and merge the solutions to get the solution to the original problem.
But if the problem contains overlapping sub problems then divide and conquer ends up solving the same sub problem over and again 
without actually knowing that it has been computed long back. But what DP does is instead of solving the same sub problem over and
again we store the results of the sub problems in a table and when ever we call a subproblem we refer table if the solution is already
computed else we compute the solution and tabularize it for future use.This is how DP reduces the time complexity.

In order to apply DP we need two things:
1.Optimal Sub structure
2.Overlapping sub problems

Optimal Sub Structure : 
	Given a problem, we should be able to write this problem in terms of smaller problems in such a way that the solutions to these
smaller problems put together to make up the solution to the big problem

Overlapping Sub Problems :
	While solving a problem we come across a sub problem and that sub problem should be a part of another problem as well, then they
are known as overlapping sub problems
If there are no overlapping sub problems it is as good as applying divide and conquer where we divide the problem into sub problems
and compute them and when they are put together we get the solution to the original problem.

Example-1:
nth Fibonacci number :
Code:
#include<stdio.h>
long long int fibonacci(int n)
{
	if( n == 1 )
		return 0;
	else if( n == 2 )
		return 1;
	return fibonacci( n - 1 )+fibonacci( n - 2 );
}
int main()
{
	long long int number;
	scanf("%lld", &number);
	printf("%lld Fibonacci number is : %lld", number, fibonacci(number));
	return 0;
}

Dynamic Programming Solution: Really Nice and it works fine
Code:
#include<stdio.h>
#include<stdlib.h>
long long int fibonacci(long long int *DP,long long int n)
{
	if( n == 1 )
		return 0;
	else if( n == 2 )
		return 1;
	else
	{
		if( DP[ n - 3 ] )
			return DP[ n - 3 ];
		DP[ n - 3 ] = fibonacci(DP,n-1)+fibonacci(DP,n-2);
		return DP[n-3];
	}
}
int main()
{
	long long int number, *DP;
	scanf("%lld", &number);
	DP=(long long int*)calloc(sizeof(long long int),number);
	printf("%lld Fibonacci number is : %lld", number, fibonacci(DP,number));
	return 0;
}

1.Matrix Chain Multiplication : DP solution
If we have a chain of matrices, the way in which we paranthesize them is going to have a significant impact on the number of
multiplications required and it is always important to keep this number as little as possible.
[A](p x q) [B](q x r) = > [AB](p x r)
Number of scalar multiplications required = ( p x r ) x q
Every element of one row of [A] has to be multiplied with every element of one column of [B] Since the number of rows in [A] =
number of colimns in [B] = q 
Therefore scalar multiplications = ( p x r ) x q
Note : Given k matrices, the number of ways in which we can paranthesize k matrices is given by the formula (2n)!/((n+1)!*n!)
where n = k-1

For example A,B,C are three matrices number of ways = 2 => A(BC) and (AB)C
For example A,B,C,D are four matrices number of ways = 5 => A((BC)D),A(B(CD)),(AB)(CD),((AB)C)D,(A(BC))D 

Ai order is pi-1 x pi

Optimal Sub structure:
Ai Ai+1 Ai+2 ------ Aj = ( Ai Ai+1 Ai+2 --- Ak ) ( Ak+1 Ak+2 --- Aj ) + pi-1 pk pj
where i <= k < j
we can split anywhere Ai | Ai+1 | Ai+2 | ----- | Aj

Recursive Equations:
	     |	0 ; if i == j
m[i,j] =  ---|  	  
	     |  min{ m[i,k] + m[k+1,j] + pi-1 pk pj } ; i <= k < j
	     
Time Complexity : O(n^3)
Space Complexity : O(n^2)
Code	:	(DP Solution)
#include<stdio.h>
#include<limits.h>
int Matrix_Chain(int *order,int n)
{
	int Matrix[n+1][n+1], solution[n+1][n+1], i, j, k, l, muls;
	for( i = 1 ; i <= n ; i++ )
		Matrix[i][i] = 0;
	for( i = 2 ; i <= n ; i++ )
	{
		for( j = 1 ; j<= n - i + 1 ; j++ )
		{
			k = j + i - 1;
			Matrix[j][k] = INT_MAX;
			for( l = j ; l < k ; l++ )
			{
				muls = Matrix[j][l] + Matrix[l+1][k] + order[j-1]*order[l]*order[k];
				if( muls < Matrix[j][k] ) 
				{
					Matrix[j][k] = muls;
					solution[j][k] = l;
				}
			}
		}
	}
	return Matrix[1][n];
}
int main()
{
	int number, *order, ind, ind2, scalar_muls;
	scanf("%d", &number);
	order=(int*)malloc(sizeof(int)*(number+1));
	for(ind=0;ind<=number;ind++)
		scanf("%d", &order[ind]);
	scalar_muls = Matrix_Chain(order,number);
	printf("Scalar Multiplications : %d",scalar_muls);
	return 0;
}

2.Longest Common Subsequence  :  DP solution
Substring  : A part of the string which has to be contiguous is known as substring
Subsequence: choose the indexes in the increasing order and if you write the characters at these indexes then it is known as Subsequence
Application : For DNA matching ( A,C,G,T )
	Conside D1 and D2 as two DNA's 
		i) If both the DNA's are equal then they are from the same parent.
		ii)If one DNA is a substring of the other then they are very much similar.
		iii)If they are unequal and not substrings then their similarity can be measured by finding their longest common subsequence
Optimal Substructure AND Recursive equations: 
		     | 0  ; if i == 0 or j == 0 
	C[i,j] = ----| 1 + C[i-1,j-1] ; if i,j > 0 and D1[i] == D2[j]
		     | max( C[i-1,j] , C[i,j-1] ) ; i,j > 0 and D1[i] != D2[j]
Overlapping Sub problems:
	There will be many overlapping subproblems and there will be m*n unique sub problems and constant time is taken for solving
each sub problem so time complexity for solving this is O(m*n).

Time Complexity	: O(m*n)
Space Complexity: O(m*n)

Code:		Bottom Up Tabulation Method
#include<stdio.h>
#include<string.h>
#define MAX 50
int LCS(char *str1,char *str2,int len1,int len2)
{
	int Matrix[len1+1][len2+1], ind1, ind2;
	for( ind1 = 0 ; ind1 <= len2 ; Matrix[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= len1 ; Matrix[ind1++][0] = 0 );
	for( ind1 = 1 ; ind1 <= len1 ; ind1++ )
		for( ind2 = 1 ; ind2 <= len2 ; ind2++ )
			if( str1[ind1-1] == str2[ind2-1] )
				Matrix[ind1][ind2] = Matrix[ind1-1][ind2-1] + 1;
			else
				Matrix[ind1][ind2] = Matrix[ind1-1][ind2] > Matrix[ind1][ind2-1] ? Matrix[ind1-1][ind2] : Matrix[ind1][ind2-1] ;
	return Matrix[len1][len2];
}
int main()
{
	char string1[MAX], string2[MAX];
	int length;
	scanf("%s%s", string1, string2);
	length = LCS(string1,string2,strlen(string1),strlen(string2));
	printf("Length of LCS : %d", length);
	return 0;
}

3.0/1 Knapsack Problem 	:	DP solution
Greedy knapsack fails in 0/1 knapsack problem where we can either include an object or leave it.
Optimal Substructure and Recursive equations :
ith object => profit pi, weight wi
capacity W
				|   max( pi + KS(i-1,W-wi), KS(i-1,W) ) ; if wi <= W
		KS(i,W) = ------|   0 ; if i == 0 or W == 0
				|   KS(i-1,W) ; if wi > W

Overlapping Sub problems : It turns out that the depth of the recursion tree is O(n+W) and the number of sub problems will be in the
order of O(2^(n+W)) which is exponential the number of unique sub problems is n*W.

Time Complexity = min( O(2^n),O(n*W) )
Space Complexity = O(n*W)

Code:
#include<stdio.h>
int Knap01(int *w,int *p,int n,int W)
{
	int Matrix[n+1][W+1], ind1, ind2;
	for( ind1 = 0 ; ind1 <= W ; Matrix[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= n ; Matrix[ind1++][0] = 0 );
	for( ind1 = 1 ; ind1 <= n ; ind1++ )
		for( ind2 = 1 ; ind2 <= W ; ind2++ )
			if( w[ind1] <= ind2 )
				Matrix[ind1][ind2] = p[ind1] + Matrix[ind1-1][ind2-w[ind1]] > Matrix[ind1-1][ind2] ? p[ind1] + Matrix[ind1-1][ind2-w[ind1]] : Matrix[ind1-1][W] ;
			else
				Matrix[ind1][ind2] = Matrix[ind1-1][ind2];
	return Matrix[n][W];				
}
int main()
{
	int number, *weight, *profit, index, Max_profit, Capacity;
	scanf("%d%d", &number, &Capacity);
	weight = (int*)malloc(sizeof(int)*(number+1));
	profit = (int*)malloc(sizeof(int)*(number+1));
	for( index = 1 ; index <= number ; index++ )
		scanf("%d%d", &weight[index], &profit[index]);
	Max_profit = Knap01(weight,profit,number,Capacity);
	printf("MAXIMUM PROFIT MADE BY 0/1 KNAPSACK IS : %d", Max_profit);
	return 0;
}

4.Subset Sum problem 	: 	DP solution
It is very much similar to 0/1 Knapsack problem
Optimal Substructure AND Recursive equations :

			  |	0	; 	i == 0 and S != 0
	SS(i,S) =  -------|	1	;	S == 0
			  |	SS(i-1,S-ai) || SS(i-1,S) ; ai <= S
			  |	SS(i-1,S)	; ai > S
Time Complexity : min( O(2^n) , O(n*S) )
Space Complexity: O(n*S)

Code:
#include<iostream>
#include<stdlib.h>
using namespace std;
int SubsetSum(int *a, int S, int n)
{
	int Matrix[n+1][S+1];
	int ind1, ind2;
	for( ind1 = 0 ; ind1 <= n ; Matrix[ind1++][0] = 1 );
	for( ind1 = 1 ; ind1 <= S ; Matrix[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= n ; ind1++ )
		for( ind2 = 1 ; ind2 <= S ; ind2++ )
			if( a[ind1] <= ind2 )
				Matrix[ind1][ind2] = Matrix[ind1-1][ind2-a[ind1]] || Matrix[ind1-1][ind2];
			else
				Matrix[ind1][ind2] = Matrix[ind1-1][ind2];
	return Matrix[n][S];
}
int main()
{
	int number, *array, Sum, index, result;
	cin >> number >> Sum;
	array = (int*)malloc(sizeof(int)*(number+1));
	for( index = 1 ; index <= number ; index++ )
		scanf("%d", &array[index]);
	result = SubsetSum(array,Sum,number);
	result == 1 ? printf("SUM IS POSSIBLE WITH GIVEN SET") : printf("SUM IS NOT POSSIBLE WITH GIVEN SET") ;
	return 0;
}

5.Maximum Sum Sub Array	: 	DP solution(Kadane's Algorithm)
Kadane's Algorithm : keywords ( currSum, maxSumSoFar, don't carry negative sum )
Maintain two variables currSum, maxSumSoFar
Do not carry a negative value to next number in currSum
Time Complexity : O(n)
Space Complexity: O(1)
Code:
#include<stdio.h>
#include<limits.h>
void printSolution(int num, int *arr, int maxSum, int end)
{
	int start, index, sum;
	for( index = end ; index >= 0 ; index-- )
	{
		sum = sum + arr[index];
		if( sum == maxSum )
			break;
	}
	start = index;
	for( index = start ; index <= end ; printf("%d ", arr[index++]));
}
int kadane(int num, int *arr)
{
	int currSum, maxSumSoFar, minSum, endIndex, index;
	currSum = maxSumSoFar = 0;
	endIndex = -1;
	minSum = INT_MIN;
	for( index = 0 ; index < num ; index++ )
	{
		if( arr[index] < 0 )
		{
			if( arr[index] > minSum )
				minSum = arr[index];
		}
		currSum = currSum + arr[index];
		if( currSum > maxSumSoFar )
		{
			maxSumSoFar = currSum;
			endIndex = index;
		}
		currSum = currSum < 0 ? 0 : currSum;
	}
//	printSolution(num,arr,maxSumSoFar,endIndex);
	return maxSumSoFar == 0 ? minSum : maxSumSoFar ;
}
int main()
{
	int number, *array, index, maxSum;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	maxSum = kadane( number,array);
	printf("\nMAXIMUM SUM OF SUB ARRAY  :  %d", maxSum);
	return 0;
}

6.Longest Increasing Subsequence	-	DP solution

Approach - 1(Simple)
Time Compleity : O(n^2)
Space Complexity:O(n)
Substructure and Recursion:
		     | 	1 
	LIS(i) = max |  1 + LIS (j) ; if a[i] > a[j] && LIS(j) + 1 > LIS(i) ;; where j < i
Code:
#include<stdio.h>
#include<malloc.h>
int LongestIS(int num, int *arr)
{
	int LIS[num], ind1, ind2, maxLen;
	for( ind1 = 0 ; ind1 < num ; LIS[ind1++] = 1 );
	for( ind1 = 1 ; ind1 < num ; ind1++ )
	{
		for( ind2 = ind1 - 1 ; ind2 >= 0 ; ind2-- )
		{
			if( arr[ind1] > arr[ind2] && LIS[ind2] + 1 > LIS[ind1] )
				LIS[ind1] = LIS[ind2] + 1;
		}
	}
	for( ind1 = 1, maxLen = LIS[0] ; ind1 < num ; ind1++ )
		if( LIS[ind1] > maxLen )
			maxLen = LIS[ind1];
	return maxLen;
}
int main()
{
	int number, *array, index, Length;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	Length = LongestIS(number, array);
	printf("Length of Longest Increasing SubSequence	:	%d", Length);
	return 0;
}

7.Longest Decreasing SubSequence	:	DP Solution
You can simply apply LIS by reversing the array and it gives you longest decreasing subsequence
Substructure and Recursion:
		     | 1 
	LDS(i) = max | 1 + LDS(j) ; if a[i] < a[j] and LDS(j) + 1 > LDS(i) ;; where j < i

Time Complexity : O(n^2)
Space Complexity: O(n)
Code:
#include<stdio.h>
#include<malloc.h>
int LongestDS(int num,int *arr)
{
	int ind1, ind2, LDS[num], maxLen;
	for( ind1 = 0 ; ind1 < num ; LDS[ind1++] = 1 );
	for( ind1 = 1 ; ind1 < num ; ind1++ )
	{
		for( ind2 = ind1 - 1 ; ind2 >= 0 ; ind2-- )
		{
			if( arr[ind1] < arr[ind2] && LDS[ind1] < LDS[ind2] + 1 )
				LDS[ind1] = LDS[ind2] + 1;
		}
	}
	for( ind1 = 1, maxLen = LDS[0] ; ind1 < num ; ind1++ )
		if( LDS[ind1] > maxLen )
			maxLen = LDS[ind1];
	return maxLen;
}
int main()
{
	int number, *array, index, length;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	length = LongestDS(number, array);
	printf("\nLength of Longest Decreasing Subsequence is : %d", length);
	return 0;
}

8.Maximum Sum Increasing SubSequence	:	DP Solution
Time Complexity : O(n^2)
Space Complexity: O(n)
Substructure and Recursion:
				      | a[i] ;
			MSIS(i) = max | a[i] + MSIS(j) ; if a[i] > a[j] && MSIS[i] < MSIS[j] + a[i] ;; where j < i
Code:
#include<stdio.h>
#include<malloc.h>
int MaximumSumIS(int num, int *arr)
{
	int ind1, ind2, MSIS[num], maxSum;
	for( ind1 = 0 ; ind1 < num ; MSIS[ind1] = arr[ind1], ind1++ );
	for( ind1 = 1 ; ind1 < num ; ind1++ )
	{
		for( ind2 = ind1 - 1 ; ind2 >= 0 ; ind2-- )
		{
			if( arr[ind1] > arr[ind2] && MSIS[ind2] + arr[ind1] > MSIS[ind1] )
				MSIS[ind1] = MSIS[ind2] + arr[ind1];
		}
	}
	for( ind1 = 1, maxSum = MSIS[0] ; ind1 < num ; ind1++ )
		if( MSIS[ind1] > maxSum )
			maxSum = MSIS[ind1];
	return maxSum;
}
int main()
{
	int number, *array, index, Sum;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	Sum = MaximumSumIS(number, array);
	printf("Maximum Sum in an Increasing Subsequence is : %d", Sum);
	return 0;
}

9.Partition Problem	:	DP Solution
Given an array of elements find out if the array can be divided into two partitions in such a way that sum of both the partitions is 
equal.
It is very similiar to subset sum problem
So here we find sum of entire array and then divide the array into two equal parts.
So if we can find a subset with half the sum then there exists another subset with remaining half sum
It is as good as partitioning the array into two equal sum partitions
Time Complexity : min( O(2^n), O(n*k) )
Space Complexity: O(n*k)

Code:
#include<stdio.h>
#include<malloc.h>
int SubsetSum(int num, int *arr, int S)
{
	int SS[num+1][S+1], ind1, ind2;
	for( ind1 = 0 ; ind1 <= num ; SS[ind1++][0] = 1 );
	for( ind1 = 1 ; ind1 <= S ; SS[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= num ; ind1++ )
	{
		for( ind2 = 1 ; ind2 <= S ; ind2++ )
			if( ind1 <= ind2 )
				SS[ind1][ind2] = SS[ind1-1][ind2-arr[ind1-1]] || SS[ind1-1][ind2];
			else
				SS[ind1][ind2] = SS[ind1-1][ind2];
	}
	return SS[num][S];
}
int main()
{
	int number, *array, index, present = 0, sum;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	for( index = 0, sum = 0 ; index < number ; sum = sum + array[index], index++);
	if( sum % 2 != 0 )
		printf("Can't be partitioned");
	else
	{
		present = SubsetSum(number, array, sum/2);
		present == 1 ? printf("can be partitioned") : printf("Can't be partitioned") ;
	}
	return 0;
}


10.Coin Change problem	:	DP Solution
Similar to subsetsum problem but the coins have infinite supply
Time Complexity : min( O(2^n), O(n*k) )
Space Complexity: O(n*k)
Code:
#include<stdio.h>
#include<stdlib.h>
int CoinChange(int num, int *arr, int K)
{
	int SS[num+1][K+1], ind1, ind2;
	for( ind1 = 0 ; ind1 <= num ; SS[ind1++][0] = 1 );
	for( ind1 = 1 ; ind1 <= K ; SS[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= num ; ind1++ )
	{
		for( ind2 = 1 ; ind2 <= K ; ind2++ )
			if( arr[ind1-1] <= ind2 )
				SS[ind1][ind2] = SS[ind1][ind2-arr[ind1-1]] + SS[ind1-1][ind2];
			else
				SS[ind1][ind2] = SS[ind1-1][ind2];
	}
	return SS[num][K];
}
int main()
{
	int number, *array, index, Ways, amount;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	scanf("%d", &amount);
	Ways = CoinChange(number, array, amount);
	printf("Number of Ways = %d", Ways);
	return 0;
}


11.Unbounded Knapsack (Hacker Rank)	:	DP Solution
Code:	(Something is wrong when done in hackerrank)
/*Knapsack 
Given an array of integers and a target sum, determine the sum nearest to but not exceeding the target that can be
created. To create the sum, use any element of your array zero or more times.
For example, if and your target sum is , you might select or . In
this case, you can arrive at exactly the target.
Function Description
Complete the unboundedKnapsack function in the editor below. It must return an integer that represents the sum nearest
to without exceeding the target value.
unboundedKnapsack has the following parameter(s):
k: an integer
arr: an array of integers
Input Format
The first line contains an integer , the number of test cases.
Each of the next pairs of lines are as follows:
- The first line contains two integers and , the length of and the target sum.
- The second line contains space separated integers .
Constraints
Output Format
Print the maximum sum for each test case which is as near as possible, but not exceeding, to the target sum on a
separate line.
Sample Input
2
3 12
1 6 9
5 9
3 4 4 4 8
Sample Output
12
9
Explanation
In the first test case, one can pick {6, 6}. In the second, we can pick {3,3,3}.
It is similar to 0/1 knapsack whose profits are nothing but weights*/
#include<stdio.h>
#include<malloc.h>
int Unboundedknapsack(int num, int *arr, int k)
{
	int KS[num+1][k+1], ind1, ind2;
	for( ind1 = 0 ; ind1 <= num ; KS[ind1++][0] = 0 );
	for( ind1 = 1 ; ind1 <= k ; KS[0][ind1++] = 0 );
	for( ind1 = 1 ; ind1 <= num ; ind1++ )
	{
		for( ind2 = 1 ; ind2 <= k ; ind2++ )
			if( arr[ind1-1] <= ind2 )
				KS[ind1][ind2] = arr[ind1-1] + KS[ind1][ind2-arr[ind1-1]] > KS[ind1-1][ind2] ? arr[ind1-1] + KS[ind1][ind2-arr[ind1-1]] : KS[ind1-1][ind2] ;
			else
				KS[ind1][ind2] = KS[ind1-1][ind2];
	}		
	return KS[num][k];
}
int main()
{
	int number, *array, index, weight, hold;
	scanf("%d", &number);
	array = (int*)malloc(sizeof(int)*number);
	for( index = 0 ; index < number ; index++ )
		scanf("%d", &array[index]);
	scanf("%d", &weight);
	hold = Unboundedknapsack(number,array,weight);
	printf("The knapsack is holding %d", hold);
	return 0;
}


12.Longest Palindromic SubString	:	Effective Solution Not DP
We go to every character and check whether it can be the centre of a palindrome
Palindromes will be of two length i:e even length palindromes and odd length palindromes
even length palindromes : aa, baab, abssba
odd length palindromes : aba, anbna
Time Complexity : O(n^2)
Space Complexity: O(1)
Code:
#include<stdio.h>
#include<string.h>
#define MAX 20
int* LongestPS(char *str, int *arr)
{
	int ind, low, high, start, len, maxLen = 0;
	len = strlen(str);
	for( ind = 1 ; str[ind] ; ind++ )
	{
		low = ind - 1;
		high = ind;
		while( low >= 0 && high < len && str[low] == str[high] )
		{
			if( high - low + 1 > maxLen )
			{
				maxLen = high - low + 1;
				start = low;
			}
			low = low - 1;
			high = high + 1;
		}
		low = ind - 1;
		high = ind + 1;
		while( low >= 0 && high < len && str[low] == str[high] )
		{
			if( high - low + 1 > maxLen )
			{
				maxLen = high - low + 1;
				start = low;
			}
			low = low - 1;
			high = high + 1;
		}
	}
	arr[0] = start;
	arr[1] = maxLen;
	return arr;
}
int main()
{
	char string[MAX];
	int *ptr, ind, trak[2] = { 0, 0 };
	scanf("%s", string);
	ptr = LongestPS(string, trak);
	printf("Maximum length of PS : %d\n", ptr[1]);	// prints length
	for( ind = ptr[0] ; ind < ptr[0] + ptr[1] ; ind++ )	// prints solution
		printf("%c", string[ind]);
	return 0;
}


















































